// <auto-generated />
using System;
using DmResinas.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DmResinas.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231116143235_criar-banco")]
    partial class criarbanco
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DmResinas.Models.Categoria", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("Banner")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte?>("CategoriaPaiId")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("Filtrar")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Foto")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaPaiId");

                    b.ToTable("Categoria");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Banner = true,
                            Filtrar = true,
                            Foto = "images/categorias/1.jpg",
                            Nome = "Feminina"
                        },
                        new
                        {
                            Id = (byte)2,
                            Banner = true,
                            Filtrar = true,
                            Foto = "images/categorias/2.jpg",
                            Nome = "Masculina"
                        },
                        new
                        {
                            Id = (byte)3,
                            Banner = true,
                            Filtrar = false,
                            Foto = "images/categorias/3.jpg",
                            Nome = "Acessórios"
                        },
                        new
                        {
                            Id = (byte)4,
                            Banner = false,
                            CategoriaPaiId = (byte)3,
                            Filtrar = true,
                            Foto = "",
                            Nome = "Bolsas"
                        },
                        new
                        {
                            Id = (byte)5,
                            Banner = false,
                            CategoriaPaiId = (byte)3,
                            Filtrar = true,
                            Foto = "",
                            Nome = "Calçados"
                        },
                        new
                        {
                            Id = (byte)6,
                            Banner = false,
                            CategoriaPaiId = (byte)3,
                            Filtrar = true,
                            Foto = "",
                            Nome = "Relógios"
                        });
                });

            modelBuilder.Entity("DmResinas.Models.Cor", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("CodigoHexa")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Cor");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CodigoHexa = "#222",
                            Nome = "Preto"
                        },
                        new
                        {
                            Id = (byte)2,
                            CodigoHexa = "#4272d7",
                            Nome = "Azul"
                        },
                        new
                        {
                            Id = (byte)3,
                            CodigoHexa = "#b3b3b3",
                            Nome = "Cinza"
                        },
                        new
                        {
                            Id = (byte)4,
                            CodigoHexa = "#00ad5f",
                            Nome = "Verde"
                        },
                        new
                        {
                            Id = (byte)5,
                            CodigoHexa = "#fa4251",
                            Nome = "Vermelho"
                        },
                        new
                        {
                            Id = (byte)6,
                            CodigoHexa = "#aaa",
                            Nome = "Branco"
                        });
                });

            modelBuilder.Entity("DmResinas.Models.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Descricaoresumida")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("Destaque")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Dimensao")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Material")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<decimal>("Peso")
                        .HasColumnType("decimal(6,3)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("SKU")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("DmResinas.Models.ProdutoAvaliacao", b =>
                {
                    b.Property<int>("ProdutoId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("AvaliacaoData")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AvaliacaoTexto")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<byte?>("ProdutoNota")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("ProdutoId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ProdutoAvaliacao");
                });

            modelBuilder.Entity("DmResinas.Models.ProdutoCategoria", b =>
                {
                    b.Property<int>("ProdutoId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<byte>("CategoriaId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(2);

                    b.HasKey("ProdutoId", "CategoriaId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("ProdtoCategoria");
                });

            modelBuilder.Entity("DmResinas.Models.ProdutoFoto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("ArquivoFoto")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("Destaque")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id", "ProdutoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ProdutoFotos");
                });

            modelBuilder.Entity("DmResinas.Models.Tamanho", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Tamanho");
                });

            modelBuilder.Entity("DmResinas.Models.Usuario", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Foto")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            UsuarioId = "114fbbf8-b1cb-4aaf-9dca-e2a5a7d46f41",
                            DataNascimento = new DateTime(2006, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "/img/users/avatar.png",
                            Nome = "Bard0u"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1c033911-ec92-4275-99ad-d1beb622d9b1",
                            ConcurrencyStamp = "b04264be-55e9-4a83-8e05-f4f653dc2f45",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "caf21585-a0aa-4504-8cd0-85447362c157",
                            ConcurrencyStamp = "f42f4906-c5d6-4a9f-9dec-35038da255ac",
                            Name = "Funcionário",
                            NormalizedName = "FUNCIONARIO"
                        },
                        new
                        {
                            Id = "2629d035-212e-47f8-b263-625d6f8d27ff",
                            ConcurrencyStamp = "95520b91-d449-4a44-8661-b101228c72d3",
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "114fbbf8-b1cb-4aaf-9dca-e2a5a7d46f41",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7122f347-9264-4efe-a73e-63c1b008d183",
                            Email = "admin@dmresinas.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@DMRESINAS.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEH67pGVah2qzFnSxKJFRRp7+pcIfNIDXN7GAh7d6/ayqhFMmUABHt1r+gdOyCNwLMw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8319e04f-2069-4619-a537-f1fc2794ce31",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "114fbbf8-b1cb-4aaf-9dca-e2a5a7d46f41",
                            RoleId = "1c033911-ec92-4275-99ad-d1beb622d9b1"
                        },
                        new
                        {
                            UserId = "114fbbf8-b1cb-4aaf-9dca-e2a5a7d46f41",
                            RoleId = "caf21585-a0aa-4504-8cd0-85447362c157"
                        },
                        new
                        {
                            UserId = "114fbbf8-b1cb-4aaf-9dca-e2a5a7d46f41",
                            RoleId = "2629d035-212e-47f8-b263-625d6f8d27ff"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DmResinas.Models.Categoria", b =>
                {
                    b.HasOne("DmResinas.Models.Categoria", "CategoriaPai")
                        .WithMany()
                        .HasForeignKey("CategoriaPaiId");

                    b.Navigation("CategoriaPai");
                });

            modelBuilder.Entity("DmResinas.Models.ProdutoAvaliacao", b =>
                {
                    b.HasOne("DmResinas.Models.Produto", "Produto")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmResinas.Models.Usuario", "Usuario")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DmResinas.Models.ProdutoCategoria", b =>
                {
                    b.HasOne("DmResinas.Models.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmResinas.Models.Produto", "Produto")
                        .WithMany("Categorias")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("DmResinas.Models.ProdutoFoto", b =>
                {
                    b.HasOne("DmResinas.Models.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("DmResinas.Models.Usuario", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AccountUser")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DmResinas.Models.Categoria", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("DmResinas.Models.Produto", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("Categorias");
                });

            modelBuilder.Entity("DmResinas.Models.Usuario", b =>
                {
                    b.Navigation("Avaliacoes");
                });
#pragma warning restore 612, 618
        }
    }
}
