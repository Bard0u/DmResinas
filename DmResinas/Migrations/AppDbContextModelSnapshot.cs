// <auto-generated />
using System;
using DmResinas.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DmResinas.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DmResinas.Models.Categoria", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("Banner")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte?>("CategoriaPaiId")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("Filtrar")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Foto")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaPaiId");

                    b.ToTable("Categoria");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Banner = true,
                            Filtrar = true,
                            Foto = "images/categorias/1.jpg",
                            Nome = "Folha de Ouro"
                        },
                        new
                        {
                            Id = (byte)2,
                            Banner = true,
                            Filtrar = true,
                            Foto = "images/categorias/2.jpg",
                            Nome = "Flores"
                        },
                        new
                        {
                            Id = (byte)3,
                            Banner = true,
                            Filtrar = false,
                            Foto = "images/categorias/3.jpg",
                            Nome = "Decoração"
                        },
                        new
                        {
                            Id = (byte)4,
                            Banner = false,
                            CategoriaPaiId = (byte)3,
                            Filtrar = true,
                            Foto = "",
                            Nome = "Chaveiros"
                        },
                        new
                        {
                            Id = (byte)5,
                            Banner = false,
                            CategoriaPaiId = (byte)3,
                            Filtrar = true,
                            Foto = "",
                            Nome = "Marca Páginas"
                        },
                        new
                        {
                            Id = (byte)6,
                            Banner = false,
                            CategoriaPaiId = (byte)3,
                            Filtrar = true,
                            Foto = "",
                            Nome = "Com Nome"
                        },
                        new
                        {
                            Id = (byte)7,
                            Banner = false,
                            CategoriaPaiId = (byte)3,
                            Filtrar = true,
                            Foto = "",
                            Nome = "Placa"
                        });
                });

            modelBuilder.Entity("DmResinas.Models.Cor", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("CodigoHexa")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("varchar(7)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Cor");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            CodigoHexa = "#000000",
                            Nome = "Preto"
                        },
                        new
                        {
                            Id = (byte)2,
                            CodigoHexa = "#efca3e",
                            Nome = "Amarelo"
                        },
                        new
                        {
                            Id = (byte)3,
                            CodigoHexa = "#9399a7",
                            Nome = "Cinza"
                        },
                        new
                        {
                            Id = (byte)4,
                            CodigoHexa = "#85dedc",
                            Nome = "Verde Água"
                        },
                        new
                        {
                            Id = (byte)5,
                            CodigoHexa = "#bd1600",
                            Nome = "Vermelho"
                        },
                        new
                        {
                            Id = (byte)6,
                            CodigoHexa = "#ffffff",
                            Nome = "Branco"
                        },
                        new
                        {
                            Id = (byte)7,
                            CodigoHexa = "#1b4a82",
                            Nome = "Azul Turquesa"
                        },
                        new
                        {
                            Id = (byte)8,
                            CodigoHexa = "#7ab5f9",
                            Nome = "Azul Candy"
                        },
                        new
                        {
                            Id = (byte)9,
                            CodigoHexa = "#7ab5f9",
                            Nome = "Bege"
                        },
                        new
                        {
                            Id = (byte)10,
                            CodigoHexa = "#efe48a",
                            Nome = "Amarelo Vintage"
                        },
                        new
                        {
                            Id = (byte)11,
                            CodigoHexa = "#978ec5",
                            Nome = "Lilás"
                        },
                        new
                        {
                            Id = (byte)12,
                            CodigoHexa = "#df98b9",
                            Nome = "Rosa Flamingo"
                        },
                        new
                        {
                            Id = (byte)13,
                            CodigoHexa = "#ffffff",
                            Nome = "Branco Perolado"
                        },
                        new
                        {
                            Id = (byte)14,
                            CodigoHexa = "#524f40",
                            Nome = "Cinza Perolado"
                        },
                        new
                        {
                            Id = (byte)15,
                            CodigoHexa = "#20362d",
                            Nome = "Verde Escuro Perolado"
                        },
                        new
                        {
                            Id = (byte)16,
                            CodigoHexa = "#001386",
                            Nome = "Azul Escuro Perolado"
                        },
                        new
                        {
                            Id = (byte)17,
                            CodigoHexa = "#034edb",
                            Nome = "Azul Perolado"
                        },
                        new
                        {
                            Id = (byte)18,
                            CodigoHexa = "#2890e5",
                            Nome = "Azul Claro Perolado"
                        },
                        new
                        {
                            Id = (byte)19,
                            CodigoHexa = "#835426",
                            Nome = "Marrom Escuro Perolado"
                        },
                        new
                        {
                            Id = (byte)20,
                            CodigoHexa = "#5e4624",
                            Nome = "Marrom Perolado"
                        },
                        new
                        {
                            Id = (byte)21,
                            CodigoHexa = "#835426",
                            Nome = "Bronze Perolado"
                        },
                        new
                        {
                            Id = (byte)22,
                            CodigoHexa = "#ac7032",
                            Nome = "Marrom Claro Perolado"
                        },
                        new
                        {
                            Id = (byte)23,
                            CodigoHexa = "#f03b04",
                            Nome = "Laranja Perolado"
                        },
                        new
                        {
                            Id = (byte)24,
                            CodigoHexa = "#e8ce33",
                            Nome = "Amarelo Perolado"
                        },
                        new
                        {
                            Id = (byte)25,
                            CodigoHexa = "#e0a621",
                            Nome = "Dourado Claro Perolado"
                        },
                        new
                        {
                            Id = (byte)26,
                            CodigoHexa = "#cc9900",
                            Nome = "Dourado Perolado"
                        },
                        new
                        {
                            Id = (byte)27,
                            CodigoHexa = "#581598",
                            Nome = "Roxo Perolado"
                        },
                        new
                        {
                            Id = (byte)28,
                            CodigoHexa = "#ffb2d1",
                            Nome = "Rosa Claro Perolado"
                        },
                        new
                        {
                            Id = (byte)29,
                            CodigoHexa = "#e17282",
                            Nome = "Rosa Chiclete Perolado"
                        },
                        new
                        {
                            Id = (byte)30,
                            CodigoHexa = "#cb3038",
                            Nome = "Pink Perolado"
                        },
                        new
                        {
                            Id = (byte)31,
                            CodigoHexa = "#cc2862",
                            Nome = "Rosa Perolado"
                        },
                        new
                        {
                            Id = (byte)32,
                            CodigoHexa = "#f3134f",
                            Nome = "Rosa Choque Perolado"
                        },
                        new
                        {
                            Id = (byte)33,
                            CodigoHexa = "#a31208",
                            Nome = "Cobre Perolado"
                        },
                        new
                        {
                            Id = (byte)34,
                            CodigoHexa = "#4fdb22",
                            Nome = "Verde Fluorescente Perolado"
                        },
                        new
                        {
                            Id = (byte)35,
                            CodigoHexa = "#06785f",
                            Nome = "Verde Esmeralda Perolado"
                        },
                        new
                        {
                            Id = (byte)36,
                            CodigoHexa = "#38ab72",
                            Nome = "Verde Água Perolado"
                        },
                        new
                        {
                            Id = (byte)37,
                            CodigoHexa = "#1d5236",
                            Nome = "Verde Bandeira Perolado"
                        },
                        new
                        {
                            Id = (byte)38,
                            CodigoHexa = "#9dbd69",
                            Nome = "Verde Claro Perolado"
                        },
                        new
                        {
                            Id = (byte)39,
                            CodigoHexa = "#d4124e",
                            Nome = "Magenta Perolado"
                        });
                });

            modelBuilder.Entity("DmResinas.Models.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("Descricaoresumida")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("Destaque")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Dimensao")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Material")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<decimal>("Peso")
                        .HasColumnType("decimal(6,3)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("SKU")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("DmResinas.Models.ProdutoAvaliacao", b =>
                {
                    b.Property<int>("ProdutoId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255)")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("AvaliacaoData")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AvaliacaoTexto")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<byte?>("ProdutoNota")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("ProdutoId", "UsuarioId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("ProdutoAvaliacao");
                });

            modelBuilder.Entity("DmResinas.Models.ProdutoCategoria", b =>
                {
                    b.Property<int>("ProdutoId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<byte>("CategoriaId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(2);

                    b.HasKey("ProdutoId", "CategoriaId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("ProdtoCategoria");
                });

            modelBuilder.Entity("DmResinas.Models.ProdutoCor", b =>
                {
                    b.Property<int>("ProdutoId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<byte>("CorId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnOrder(2);

                    b.HasKey("ProdutoId", "CorId");

                    b.HasIndex("CorId");

                    b.ToTable("ProdutoCor");
                });

            modelBuilder.Entity("DmResinas.Models.ProdutoFoto", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.Property<string>("ArquivoFoto")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<bool>("Destaque")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id", "ProdutoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ProdutoFotos");
                });

            modelBuilder.Entity("DmResinas.Models.Tamanho", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.HasKey("Id");

                    b.ToTable("Tamanho");
                });

            modelBuilder.Entity("DmResinas.Models.Usuario", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Foto")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            UsuarioId = "8742e16d-f897-4958-8e81-aa705e222dce",
                            DataNascimento = new DateTime(2006, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "/img/users/avatar.png",
                            Nome = "Bard0u"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "18ac52cf-36ff-4986-871b-70835b4e3596",
                            ConcurrencyStamp = "4f4146cf-f8a8-4e4e-8373-cec1becb37c4",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "8f4f4a8c-f913-48b3-b8b4-ad385feeb160",
                            ConcurrencyStamp = "ebade79e-994b-4fa4-b7aa-6a75981b8ea8",
                            Name = "Funcionário",
                            NormalizedName = "FUNCIONARIO"
                        },
                        new
                        {
                            Id = "819f5c9e-42b3-48a7-8a52-032bd9bb9588",
                            ConcurrencyStamp = "e7d99ea3-6cf5-4604-8a67-f65ba9c0eac1",
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8742e16d-f897-4958-8e81-aa705e222dce",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "498b3b3c-44d2-4cf8-9b64-f560fd591953",
                            Email = "admin@dmresinas.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@DMRESINAS.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEIxMcPbZhjaRkdydGDwva6Fa9mzhgSoXiI88PJORdKZX8tpzevctwjWgrZogXHQWNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a20d8e4f-ba45-4a5c-93a6-359392f44c3b",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8742e16d-f897-4958-8e81-aa705e222dce",
                            RoleId = "18ac52cf-36ff-4986-871b-70835b4e3596"
                        },
                        new
                        {
                            UserId = "8742e16d-f897-4958-8e81-aa705e222dce",
                            RoleId = "8f4f4a8c-f913-48b3-b8b4-ad385feeb160"
                        },
                        new
                        {
                            UserId = "8742e16d-f897-4958-8e81-aa705e222dce",
                            RoleId = "819f5c9e-42b3-48a7-8a52-032bd9bb9588"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DmResinas.Models.Categoria", b =>
                {
                    b.HasOne("DmResinas.Models.Categoria", "CategoriaPai")
                        .WithMany()
                        .HasForeignKey("CategoriaPaiId");

                    b.Navigation("CategoriaPai");
                });

            modelBuilder.Entity("DmResinas.Models.ProdutoAvaliacao", b =>
                {
                    b.HasOne("DmResinas.Models.Produto", "Produto")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmResinas.Models.Usuario", "Usuario")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("DmResinas.Models.ProdutoCategoria", b =>
                {
                    b.HasOne("DmResinas.Models.Categoria", "Categoria")
                        .WithMany("Produtos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmResinas.Models.Produto", "Produto")
                        .WithMany("Categorias")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("DmResinas.Models.ProdutoCor", b =>
                {
                    b.HasOne("DmResinas.Models.Cor", "Cor")
                        .WithMany("Produtos")
                        .HasForeignKey("CorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DmResinas.Models.Produto", "Produto")
                        .WithMany("Cores")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cor");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("DmResinas.Models.ProdutoFoto", b =>
                {
                    b.HasOne("DmResinas.Models.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("DmResinas.Models.Usuario", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AccountUser")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DmResinas.Models.Categoria", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("DmResinas.Models.Cor", b =>
                {
                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("DmResinas.Models.Produto", b =>
                {
                    b.Navigation("Avaliacoes");

                    b.Navigation("Categorias");

                    b.Navigation("Cores");
                });

            modelBuilder.Entity("DmResinas.Models.Usuario", b =>
                {
                    b.Navigation("Avaliacoes");
                });
#pragma warning restore 612, 618
        }
    }
}
